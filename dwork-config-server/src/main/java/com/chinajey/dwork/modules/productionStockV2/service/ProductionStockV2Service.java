package com.chinajey.dwork.modules.productionStockV2.service;import cn.hutool.core.collection.CollectionUtil;import com.chinajay.virgo.bmf.obj.BmfArray;import com.chinajay.virgo.bmf.obj.BmfObject;import com.chinajay.virgo.bmf.service.BmfService;import com.chinajey.application.common.exception.BusinessException;import com.chinajey.application.common.holder.ThreadLocalHolder;import com.chinajey.application.common.holder.UserAuthDto;import com.chinajey.dwork.common.enums.DocumentStatusEnum;import com.chinajey.dwork.common.utils.BusinessUtils;import com.chinajey.dwork.modules.outboundApplicant.service.OutboundApplicantService;import com.tengnat.dwork.common.utils.CodeGenerator;import com.tengnat.dwork.common.utils.LogisticsUtils;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.annotation.Resource;import java.math.BigDecimal;import java.util.*;import java.util.stream.Collectors;@Servicepublic class ProductionStockV2Service {    private static final String BMF_CLASS = "productionStock";    private static final String DETAIL_ATTR = "productionStockAutoMapping";    @Resource    private BmfService bmfService;    @Resource    private BusinessUtils businessUtils;    @Resource    private CodeGenerator codeGenerator;    @Resource    private OutboundApplicantService outboundApplicantService;    @Transactional    public void issued(List<Long> ids) {        if (CollectionUtil.isEmpty(ids)) {            throw new BusinessException("生产拣配单id不能为空");        }        for (Long id : ids) {            BmfObject bmfObject = this.bmfService.find(BMF_CLASS, id);            if (bmfObject == null) {                throw new BusinessException("生产拣配单[" + id + "]不存在");            }            String status = bmfObject.getString("documentStatus");            if (!DocumentStatusEnum.whetherIssued(status)) {                throw new BusinessException("单据状态为[" + DocumentStatusEnum.getEnum(status).getName() + "],不能下达");            }            bmfObject.getAndRefreshList(DETAIL_ATTR);            this.createOutboundApplicant(bmfObject);            bmfObject.put("documentStatus", DocumentStatusEnum.PENDING.getCode());            this.bmfService.updateByPrimaryKeySelective(bmfObject);        }    }    @Transactional    public void close(List<Long> ids) {        if (ids == null) {            throw new RuntimeException("参数缺失[ids]");        }        for (Long id : ids) {            BmfObject bmfObject = this.bmfService.find(BMF_CLASS, id);            if (bmfObject == null) {                throw new BusinessException("生产拣配单不存在,id:" + id);            }            String status = bmfObject.getString("documentStatus");            if (!DocumentStatusEnum.whetherClose(status)) {                throw new BusinessException("单据状态为[" + DocumentStatusEnum.getEnum(status).getName() + "],不能关闭");            }            //根据生产备料单编码查询出库申请单            String code = bmfObject.getString("code");            Map<String, Object> params = new HashMap<>(2);            params.put("preDocumentCode", code);            List<BmfObject> outboundApplicants = bmfService.find("outboundApplicant", params);            List<Long> outboundApplicantIds = outboundApplicants.stream().map(BmfObject::getPrimaryKeyValue).collect(Collectors.toList());            outboundApplicantService.close(outboundApplicantIds);            // 更新单据状态            bmfObject.put("documentStatus", DocumentStatusEnum.CLOSED.getCode());            bmfService.updateByPrimaryKeySelective(bmfObject);        }    }    @Transactional    public void cancel(List<Long> ids) {        if (ids == null) {            throw new RuntimeException("参数缺失[ids]");        }        for (Long id : ids) {            BmfObject bmfObject = this.bmfService.find(BMF_CLASS, id);            if (bmfObject == null) {                throw new BusinessException("生产拣配单不存在,id:" + id);            }            String status = bmfObject.getString("documentStatus");            if (!DocumentStatusEnum.whetherCancel(status)) {                throw new BusinessException("单据状态为[" + DocumentStatusEnum.getEnum(status).getName() + "],不能取消");            }            //根据生产备料单编码查询出库申请单            String code = bmfObject.getString("code");            Map<String, Object> params = new HashMap<>(2);            params.put("preDocumentCode", code);            List<BmfObject> outboundApplicants = bmfService.find("outboundApplicant", params);            List<Long> outboundApplicantIds = outboundApplicants.stream().map(BmfObject::getPrimaryKeyValue).collect(Collectors.toList());            outboundApplicantService.cancel(outboundApplicantIds);            // 更新单据状态            bmfObject.put("documentStatus", DocumentStatusEnum.CANCEL.getCode());            bmfService.updateByPrimaryKeySelective(bmfObject);        }    }    @Transactional    public void finish(List<Long> ids) {        if (ids == null) {            throw new RuntimeException("参数缺失[ids]");        }        for (Long id : ids) {            BmfObject bmfObject = this.bmfService.find(BMF_CLASS, id);            if (bmfObject == null) {                throw new BusinessException("生产拣配单不存在,id:" + id);            }            String status = bmfObject.getString("documentStatus");            if (!DocumentStatusEnum.whetherComplete(status)) {                throw new BusinessException("单据状态为[" + DocumentStatusEnum.getEnum(status).getName() + "],不能完成");            }            // 更新单据状态            bmfObject.put("documentStatus", DocumentStatusEnum.COMPLETED.getCode());            bmfService.updateByPrimaryKeySelective(bmfObject);            //根据生产备料单编码查询出库申请单            String code = bmfObject.getString("code");            Map<String, Object> params = new HashMap<>(2);            params.put("preDocumentCode", code);            List<BmfObject> outboundApplicants = bmfService.find("outboundApplicant", params);            List<Long> outboundApplicantIds = outboundApplicants.stream().map(BmfObject::getPrimaryKeyValue).collect(Collectors.toList());            outboundApplicantService.finish(outboundApplicantIds);        }    }    /**     * 根据生产拣配单创建出库申请单     *     * @param productPicking 生产拣配单     */    private void createOutboundApplicant(BmfObject productPicking) {        List<BmfObject> productPickingDetails = productPicking.getList(DETAIL_ATTR);        UserAuthDto.Resource userInfo = ThreadLocalHolder.getLoginInfo().getResource();        BmfObject bmfObject = new BmfObject("outboundApplicant");        bmfObject.put("operatorCode", userInfo.getResourceCode());        bmfObject.put("operatorName", userInfo.getResourceName());        bmfObject.put("operatorTime", new Date());        bmfObject.put("documentStatus", productPicking.getString("documentStatus"));        bmfObject.put("sourceOrderCode", productPicking.getString("code"));        bmfObject.put("sourceSystem", productPicking.getString("sourceSystem"));        //设置单据        LogisticsUtils.setDocumentData(productPicking, bmfObject);        // 单据业务类型        bmfObject.put("orderBusinessType", "produceOutbound");        BmfArray details = new BmfArray();        for (int i = 0; i < productPickingDetails.size(); i++) {            BmfObject detail = new BmfObject("outboundApplicantDetail");            BmfObject productPickingDetail = productPickingDetails.get(i);            detail.put("materialCode", productPickingDetail.getString("materialCode"));            detail.put("materialName", productPickingDetail.getString("materialName"));            detail.put("specifications", productPickingDetail.getString("specifications"));            detail.put("unit", productPickingDetail.getBmfObject("unit"));            detail.put("planQuantity", productPickingDetail.getBigDecimal("quantity"));            detail.put("outboundQuantity", BigDecimal.ZERO);            detail.put("waitQuantity", productPickingDetail.getBigDecimal("quantity"));            detail.put("lineNum", i + 1);            detail.put("sourceWarehouseCode", productPickingDetail.getString("outputWarehouseCode"));            detail.put("sourceWarehouseName", productPickingDetail.getString("outputWarehouseName"));            detail.put("targetWarehouseCode", productPickingDetail.getString("inputWarehouseCode"));            detail.put("targetWarehouseName", productPickingDetail.getString("inputWarehouseName"));            details.add(detail);        }        bmfObject.put("outboundApplicantIdAutoMapping", details);        this.codeGenerator.setCode(bmfObject);        this.bmfService.saveOrUpdate(bmfObject);        outboundApplicantService.issued(Collections.singletonList(bmfObject.getPrimaryKeyValue()));    }}